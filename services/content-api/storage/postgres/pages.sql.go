// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: pages.sql

package postgres

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createPage = `-- name: CreatePage :one
insert into pages (
  id,
  "namespace",
  slug,
  current_content_id,
  published_at
) values (
  $1,
  $2,
  $3,
  $4,
  $5
) returning id
`

type CreatePageParams struct {
	ID               uuid.UUID
	Namespace        string
	Slug             string
	CurrentContentID uuid.UUID
	PublishedAt      sql.NullTime
}

func (q *Queries) CreatePage(ctx context.Context, arg CreatePageParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createPage,
		arg.ID,
		arg.Namespace,
		arg.Slug,
		arg.CurrentContentID,
		arg.PublishedAt,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const createPageContent = `-- name: CreatePageContent :one
insert into pages_content (
  id,
  page_id,
  title,
  html
) values (
  $1,
  $2,
  $3,
  $4
) returning id
`

type CreatePageContentParams struct {
	ID     uuid.UUID
	PageID uuid.UUID
	Title  string
	Html   string
}

func (q *Queries) CreatePageContent(ctx context.Context, arg CreatePageContentParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createPageContent,
		arg.ID,
		arg.PageID,
		arg.Title,
		arg.Html,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const findPageBySlug = `-- name: FindPageBySlug :one
select
  pages.id,
  "namespace",
  slug,
  pages_content.title,
  pages_content.html,
  published_at
from pages
inner join pages_content
  on pages_content.id = pages.current_content_id
where
  deleted_at is null
  and "namespace" = $1
  and slug = $2
`

type FindPageBySlugParams struct {
	Namespace string
	Slug      string
}

type FindPageBySlugRow struct {
	ID          uuid.UUID
	Namespace   string
	Slug        string
	Title       string
	Html        string
	PublishedAt sql.NullTime
}

func (q *Queries) FindPageBySlug(ctx context.Context, arg FindPageBySlugParams) (FindPageBySlugRow, error) {
	row := q.db.QueryRowContext(ctx, findPageBySlug, arg.Namespace, arg.Slug)
	var i FindPageBySlugRow
	err := row.Scan(
		&i.ID,
		&i.Namespace,
		&i.Slug,
		&i.Title,
		&i.Html,
		&i.PublishedAt,
	)
	return i, err
}

const listPages = `-- name: ListPages :many
select
  pages.id,
  "namespace",
  slug,
  pages_content.title,
  published_at,
  pages.created_at,
  pages.updated_at
from pages
inner join pages_content
  on pages_content.id = pages.current_content_id
where
  deleted_at is null
  and "namespace" = $1
  and ($2::boolean or published_at is not null)
order by pages.created_at desc
limit $4
offset $3
`

type ListPagesParams struct {
	Namespace     string
	IncludeDrafts bool
	StartFrom     int32
	PageSize      int32
}

type ListPagesRow struct {
	ID          uuid.UUID
	Namespace   string
	Slug        string
	Title       string
	PublishedAt sql.NullTime
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) ListPages(ctx context.Context, arg ListPagesParams) ([]ListPagesRow, error) {
	rows, err := q.db.QueryContext(ctx, listPages,
		arg.Namespace,
		arg.IncludeDrafts,
		arg.StartFrom,
		arg.PageSize,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListPagesRow
	for rows.Next() {
		var i ListPagesRow
		if err := rows.Scan(
			&i.ID,
			&i.Namespace,
			&i.Slug,
			&i.Title,
			&i.PublishedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const pagesMetadata = `-- name: PagesMetadata :one
select
  count(pages.id) as total_size,
  $1::boolean as drafts_included
from pages
where
  deleted_at is null
  and ($1::boolean or published_at is not null)
  and "namespace" = $2
`

type PagesMetadataParams struct {
	IncludeDrafts bool
	Namespace     string
}

type PagesMetadataRow struct {
	TotalSize      int64
	DraftsIncluded bool
}

func (q *Queries) PagesMetadata(ctx context.Context, arg PagesMetadataParams) (PagesMetadataRow, error) {
	row := q.db.QueryRowContext(ctx, pagesMetadata, arg.IncludeDrafts, arg.Namespace)
	var i PagesMetadataRow
	err := row.Scan(&i.TotalSize, &i.DraftsIncluded)
	return i, err
}

const updatePage = `-- name: UpdatePage :one
update pages
set
  slug = $1,
  current_content_id = $2,
  published_at = $3,
  updated_at = now()
where
  id = $4 and
  deleted_at is null
returning id
`

type UpdatePageParams struct {
	Slug             string
	CurrentContentID uuid.UUID
	PublishedAt      sql.NullTime
	ID               uuid.UUID
}

func (q *Queries) UpdatePage(ctx context.Context, arg UpdatePageParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, updatePage,
		arg.Slug,
		arg.CurrentContentID,
		arg.PublishedAt,
		arg.ID,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package openapi

import (
	"fmt"
	"net/http"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/labstack/echo/v4"
)

const (
	CookieAuthScopes = "cookieAuth.Scopes"
)

// Page defines model for Page.
type Page struct {
	CreatedAt   *time.Time          `json:"created_at,omitempty"`
	Html        *string             `json:"html,omitempty"`
	Id          *openapi_types.UUID `json:"id,omitempty"`
	PublishedAt *time.Time          `json:"published_at,omitempty"`
	Slug        string              `json:"slug"`
	Title       string              `json:"title"`
	UpdatedAt   *time.Time          `json:"updated_at,omitempty"`
}

// Pages defines model for Pages.
type Pages struct {
	Pages []Page `json:"pages"`
}

// PageCreateJSONRequestBody defines body for PageCreate for application/json ContentType.
type PageCreateJSONRequestBody = Page

// PageUpdateJSONRequestBody defines body for PageUpdate for application/json ContentType.
type PageUpdateJSONRequestBody = Page

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// lists all pages
	// (GET /pages)
	PageList(ctx echo.Context) error
	// Creates a new page
	// (POST /pages)
	PageCreate(ctx echo.Context) error
	// Updates an existing page
	// (PUT /pages/{id})
	PageUpdate(ctx echo.Context, id string) error
	// Returns page content for a given slug
	// (GET /pages/{pageSlug})
	PageFindBySlug(ctx echo.Context, pageSlug string) error
	// Checks if service is responsive
	// (GET /ping)
	Ping(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PageList converts echo context to params.
func (w *ServerInterfaceWrapper) PageList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PageList(ctx)
	return err
}

// PageCreate converts echo context to params.
func (w *ServerInterfaceWrapper) PageCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PageCreate(ctx)
	return err
}

// PageUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) PageUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PageUpdate(ctx, id)
	return err
}

// PageFindBySlug converts echo context to params.
func (w *ServerInterfaceWrapper) PageFindBySlug(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pageSlug" -------------
	var pageSlug string

	err = runtime.BindStyledParameterWithLocation("simple", false, "pageSlug", runtime.ParamLocationPath, ctx.Param("pageSlug"), &pageSlug)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSlug: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PageFindBySlug(ctx, pageSlug)
	return err
}

// Ping converts echo context to params.
func (w *ServerInterfaceWrapper) Ping(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Ping(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/pages", wrapper.PageList)
	router.POST(baseURL+"/pages", wrapper.PageCreate)
	router.PUT(baseURL+"/pages/:id", wrapper.PageUpdate)
	router.GET(baseURL+"/pages/:pageSlug", wrapper.PageFindBySlug)
	router.GET(baseURL+"/ping", wrapper.Ping)

}

openapi: 3.0.3
info:
  title: content-api
  license:
    name: MIT
    url: https://github.com/tadoku/tadoku/blob/main/LICENSE
  version: 1.0.0
externalDocs:
  description: Find out more about Tadoku
  url: https://tadoku.github.io/tadoku/
servers:
  - url: https://tadoku.app/api/content/
paths:
  /pages/{slug}:
    get:
      summary: Returns page content for a given slug
      operationId: pageFindBySlug
      tags: [pages]
      parameters:
        - name: slug
          in: path
          description: Slug of page to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page'    
        '404':
          description: Page not found or not published
  /pages/{id}:
    put:
      summary: Updates an existing page
      operationId: pageUpdate
      tags: [pages]
      security:
        - cookieAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Page'
      parameters:
        - name: id
          in: path
          description: ID of page
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page'
        '400':
          description: Invalid page
        '404':
          description: Page does not exist and cannot be updated
  /pages:
    post:
      summary: Creates a new page
      operationId: pageCreate
      tags: [pages]
      security:
        - cookieAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Page'
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page'
        '400':
          description: Invalid page
    get:
      summary: lists all pages
      operationId: pageList
      tags: [pages]
      security:
        - cookieAuth: []
      parameters:
        - name: page_size
          in: query
          required: false
          schema:
            type: integer
        - name: page
          in: query
          required: false
          schema:
            type: integer
        - name: include_drafts
          in: query
          required: false
          allowEmptyValue: true
          schema:
            type: boolean
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pages'
  /posts/{namespace}/{slug}:
    get:
      summary: Returns page content for a given slug
      operationId: postFindBySlug
      tags: [posts]
      parameters:
        - name: slug
          in: path
          description: Slug of post to return
          required: true
          schema:
            type: string
        - name: namespace
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'    
        '404':
          description: Post not found or not published
  /posts/{namespace}/{id}:
    put:
      summary: Updates an existing post
      operationId: postUpdate
      tags: [posts]
      security:
        - cookieAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      parameters:
        - name: id
          in: path
          description: ID of post
          required: true
          schema:
            type: string
        - name: namespace
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Invalid post
        '404':
          description: Post does not exist and cannot be updated
  /posts/{namespace}:
    post:
      summary: Creates a new post
      operationId: postCreate
      tags: [posts]
      security:
        - cookieAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Invalid post
    get:
      summary: lists all posts
      operationId: postList
      tags: [posts]
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
        - name: page_size
          in: query
          required: false
          schema:
            type: integer
        - name: page
          in: query
          required: false
          schema:
            type: integer
        - name: include_drafts
          in: query
          required: false
          allowEmptyValue: true
          schema:
            type: boolean
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Posts'
  /ping:
    get:
      summary: Checks if service is responsive
      operationId: ping
      tags: [metadata]
      responses:
        '200':
          description: successful operation
          content:
            text/plain:
              schema:
                type: string
components:
  schemas:
    Page:
      type: object
      required:
        - slug
        - title
      properties:
        id:
          type: string
          format: uuid
          example: d7e82f70-f7b9-4952-8258-1e4d16f0c244
        slug:
          type: string
          example: welcome-to-tadoku
        title:
          type: string
          example: Welcome to Tadoku!
        html:
          type: string
          example: <p>Example page!</p>
        published_at:
          type: string
          format: date-time
          example: 2022-12-14T19:48:00Z
        created_at:
          type: string
          format: date-time
          example: 2022-12-14T19:48:00Z
        updated_at:
          type: string
          format: date-time
          example: 2022-12-14T19:48:00Z
    Pages:
      allOf:
        - $ref: '#/components/schemas/PaginatedList'
        - type: object
          required:
            - pages
          properties:
            pages:
              type: array
              maxItems: 50
              items:
                $ref: "#/components/schemas/Page"
    Post:
      type: object
      required:
        - slug
        - title
        - content
      properties:
        id:
          type: string
          format: uuid
          example: d7e82f70-f7b9-4952-8258-1e4d16f0c244
        namespace:
          type: string
          example: tadoku
        slug:
          type: string
          example: welcome-to-tadoku
        title:
          type: string
          example: Welcome to Tadoku!
        content:
          type: string
          format: markdown
          example: This an example **with markdown**.
        published_at:
          type: string
          format: date-time
          example: 2022-12-14T19:48:00Z
        created_at:
          type: string
          format: date-time
          example: 2022-12-14T19:48:00Z
        updated_at:
          type: string
          format: date-time
          example: 2022-12-14T19:48:00Z
    Posts:
      allOf:
        - $ref: '#/components/schemas/PaginatedList'
        - type: object
          required:
            - posts
          properties:
            posts:
              type: array
              maxItems: 50
              items:
                $ref: "#/components/schemas/Post"
    PaginatedList:
      type: object
      required:
        - next_page_token
        - total_size
      properties:
        total_size:
          type: integer
          example: 100
        next_page_token:
          type: string
          description: is empty if there's no next page
          example: "3"
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: ory_kratos_session
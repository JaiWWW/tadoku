// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package openapi

import (
	"time"

	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/labstack/echo/v4"
)

const (
	CookieAuthScopes = "cookieAuth.Scopes"
)

// Activities defines model for Activities.
type Activities struct {
	Activities []Activity `json:"activities"`
}

// Activity defines model for Activity.
type Activity struct {
	Default bool   `json:"default"`
	Id      int32  `json:"id"`
	Name    string `json:"name"`
}

// Contest defines model for Contest.
type Contest struct {
	ActivityTypeIdAllowList []int32             `json:"activity_type_id_allow_list"`
	ContestEnd              openapi_types.Date  `json:"contest_end"`
	ContestStart            openapi_types.Date  `json:"contest_start"`
	CreatedAt               *time.Time          `json:"created_at,omitempty"`
	Description             string              `json:"description"`
	Id                      *openapi_types.UUID `json:"id,omitempty"`
	LanguageCodeAllowList   []string            `json:"language_code_allow_list"`
	Official                bool                `json:"official"`
	OwnerUserDisplayName    *string             `json:"owner_user_display_name,omitempty"`
	OwnerUserId             *openapi_types.UUID `json:"owner_user_id,omitempty"`
	Private                 bool                `json:"private"`
	RegistrationEnd         openapi_types.Date  `json:"registration_end"`
	RegistrationStart       openapi_types.Date  `json:"registration_start"`
	UpdatedAt               *time.Time          `json:"updated_at,omitempty"`
}

// ContestConfigurationOptions defines model for ContestConfigurationOptions.
type ContestConfigurationOptions struct {
	Activities []Activity `json:"activities"`
	Languages  []Language `json:"languages"`
}

// Language defines model for Language.
type Language struct {
	// Code In ISO-639-3 https://en.wikipedia.org/wiki/Wikipedia:WikiProject_Languages/List_of_ISO_639-3_language_codes_(2019)
	Code string `json:"code"`
	Name string `json:"name"`
}

// Languages defines model for Languages.
type Languages struct {
	Languages []Language `json:"languages"`
}

// ContestCreateJSONRequestBody defines body for ContestCreate for application/json ContentType.
type ContestCreateJSONRequestBody = Contest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Creates a new contest
	// (POST /contests)
	ContestCreate(ctx echo.Context) error
	// Fetches the configuration options for a new contest
	// (GET /contests/configuration-options)
	ContestGetConfigurations(ctx echo.Context) error
	// Checks if service is responsive
	// (GET /ping)
	Ping(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ContestCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ContestCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ContestCreate(ctx)
	return err
}

// ContestGetConfigurations converts echo context to params.
func (w *ServerInterfaceWrapper) ContestGetConfigurations(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ContestGetConfigurations(ctx)
	return err
}

// Ping converts echo context to params.
func (w *ServerInterfaceWrapper) Ping(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Ping(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/contests", wrapper.ContestCreate)
	router.GET(baseURL+"/contests/configuration-options", wrapper.ContestGetConfigurations)
	router.GET(baseURL+"/ping", wrapper.Ping)

}

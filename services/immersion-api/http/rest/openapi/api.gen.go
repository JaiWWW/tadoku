// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package openapi

import (
	"fmt"
	"net/http"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/labstack/echo/v4"
)

const (
	CookieAuthScopes = "cookieAuth.Scopes"
)

// Activities defines model for Activities.
type Activities struct {
	Activities []Activity `json:"activities"`
}

// Activity defines model for Activity.
type Activity struct {
	Default bool   `json:"default"`
	Id      int32  `json:"id"`
	Name    string `json:"name"`
}

// Contest defines model for Contest.
type Contest struct {
	ActivityTypeIdAllowList []int32             `json:"activity_type_id_allow_list"`
	ContestEnd              openapi_types.Date  `json:"contest_end"`
	ContestStart            openapi_types.Date  `json:"contest_start"`
	CreatedAt               *time.Time          `json:"created_at,omitempty"`
	Deleted                 *bool               `json:"deleted,omitempty"`
	Description             string              `json:"description"`
	Id                      *openapi_types.UUID `json:"id,omitempty"`
	LanguageCodeAllowList   []string            `json:"language_code_allow_list"`
	Official                bool                `json:"official"`
	OwnerUserDisplayName    *string             `json:"owner_user_display_name,omitempty"`
	OwnerUserId             *openapi_types.UUID `json:"owner_user_id,omitempty"`
	Private                 bool                `json:"private"`
	RegistrationEnd         openapi_types.Date  `json:"registration_end"`
	RegistrationStart       openapi_types.Date  `json:"registration_start"`
	UpdatedAt               *time.Time          `json:"updated_at,omitempty"`
}

// ContestConfigurationOptions defines model for ContestConfigurationOptions.
type ContestConfigurationOptions struct {
	Activities             []Activity `json:"activities"`
	CanCreateOfficialRound bool       `json:"can_create_official_round"`
	Languages              []Language `json:"languages"`
}

// Contests defines model for Contests.
type Contests struct {
	Contests []Contest `json:"contests"`

	// NextPageToken is empty if there's no next page
	NextPageToken string `json:"next_page_token"`
	TotalSize     int    `json:"total_size"`
}

// Language defines model for Language.
type Language struct {
	// Code In ISO-639-3 https://en.wikipedia.org/wiki/Wikipedia:WikiProject_Languages/List_of_ISO_639-3_language_codes_(2019)
	Code string `json:"code"`
	Name string `json:"name"`
}

// Languages defines model for Languages.
type Languages struct {
	Languages []Language `json:"languages"`
}

// PaginatedList defines model for PaginatedList.
type PaginatedList struct {
	// NextPageToken is empty if there's no next page
	NextPageToken string `json:"next_page_token"`
	TotalSize     int    `json:"total_size"`
}

// ContestListParams defines parameters for ContestList.
type ContestListParams struct {
	PageSize       *int                `form:"page_size,omitempty" json:"page_size,omitempty"`
	Page           *int                `form:"page,omitempty" json:"page,omitempty"`
	IncludeDeleted *bool               `form:"include_deleted,omitempty" json:"include_deleted,omitempty"`
	Official       *bool               `form:"official,omitempty" json:"official,omitempty"`
	UserId         *openapi_types.UUID `form:"user_id,omitempty" json:"user_id,omitempty"`
}

// ContestCreateJSONRequestBody defines body for ContestCreate for application/json ContentType.
type ContestCreateJSONRequestBody = Contest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Lists all the contests, paginated
	// (GET /contests)
	ContestList(ctx echo.Context, params ContestListParams) error
	// Creates a new contest
	// (POST /contests)
	ContestCreate(ctx echo.Context) error
	// Fetches the configuration options for a new contest
	// (GET /contests/configuration-options)
	ContestGetConfigurations(ctx echo.Context) error
	// Fetches a contest by id
	// (GET /contests/{id})
	ContestFindByID(ctx echo.Context, id openapi_types.UUID) error
	// Checks if service is responsive
	// (GET /ping)
	Ping(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ContestList converts echo context to params.
func (w *ServerInterfaceWrapper) ContestList(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ContestListParams
	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page_size: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "include_deleted" -------------

	err = runtime.BindQueryParameter("form", true, false, "include_deleted", ctx.QueryParams(), &params.IncludeDeleted)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include_deleted: %s", err))
	}

	// ------------- Optional query parameter "official" -------------

	err = runtime.BindQueryParameter("form", true, false, "official", ctx.QueryParams(), &params.Official)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter official: %s", err))
	}

	// ------------- Optional query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "user_id", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ContestList(ctx, params)
	return err
}

// ContestCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ContestCreate(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ContestCreate(ctx)
	return err
}

// ContestGetConfigurations converts echo context to params.
func (w *ServerInterfaceWrapper) ContestGetConfigurations(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ContestGetConfigurations(ctx)
	return err
}

// ContestFindByID converts echo context to params.
func (w *ServerInterfaceWrapper) ContestFindByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ContestFindByID(ctx, id)
	return err
}

// Ping converts echo context to params.
func (w *ServerInterfaceWrapper) Ping(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Ping(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/contests", wrapper.ContestList)
	router.POST(baseURL+"/contests", wrapper.ContestCreate)
	router.GET(baseURL+"/contests/configuration-options", wrapper.ContestGetConfigurations)
	router.GET(baseURL+"/contests/:id", wrapper.ContestFindByID)
	router.GET(baseURL+"/ping", wrapper.Ping)

}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: contest_profile.sql

package postgres

import (
	"context"

	"github.com/google/uuid"
)

const fetchScoresForContestProfile = `-- name: FetchScoresForContestProfile :many
select
  language_code,
  sum(score)::real as score
from logs
inner join contest_logs
  on contest_logs.log_id = logs.id
where
  contest_logs.contest_id = $1
  and logs.user_id = $2
  and logs.deleted_at is null
group by language_code
order by score desc
`

type FetchScoresForContestProfileParams struct {
	ContestID uuid.UUID
	UserID    uuid.UUID
}

type FetchScoresForContestProfileRow struct {
	LanguageCode string
	Score        float32
}

func (q *Queries) FetchScoresForContestProfile(ctx context.Context, arg FetchScoresForContestProfileParams) ([]FetchScoresForContestProfileRow, error) {
	rows, err := q.db.QueryContext(ctx, fetchScoresForContestProfile, arg.ContestID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FetchScoresForContestProfileRow
	for rows.Next() {
		var i FetchScoresForContestProfileRow
		if err := rows.Scan(&i.LanguageCode, &i.Score); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
